// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OmnitalkSdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import Foundation
@_exported import OmnitalkSdk
import Swift
import SwiftUI
import WebRTC
import _Concurrency
import _StringProcessing
public protocol OmniEventDelegate : AnyObject {
  func onEvent(eventName: OmnitalkSdk.OmniEvent, message: Any)
  func onClose()
}
@_hasMissingDesignatedInitializers public class OmniTalk {
  weak public var delegate: (any OmnitalkSdk.OmniEventDelegate)?
  public static let VERSION: Swift.String
  public static func sdkInit(serviceId: Swift.String, serviceKey: Swift.String) throws
  public static func getInstance() -> OmnitalkSdk.OmniTalk?
  #if compiler(>=5.3) && $AsyncAwait
  public func createSession(userId: Swift.String?) async throws -> OmnitalkSdk.CreateSessionResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func makeSipNumber(callNumber: Swift.String?, roomId: Swift.String?) async throws -> OmnitalkSdk.MakeSipNumberResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sessionList(page: Swift.Int?) async throws -> OmnitalkSdk.SessionListResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func createRoom(roomType: OmnitalkSdk.VIDEOROOM_TYPE, subject: Swift.String?, secret: Swift.String?, startDate: Foundation.Date?, endDate: Foundation.Date?) async throws -> OmnitalkSdk.CreateRoomResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func destroyRoom(roomId: Swift.String) async throws -> OmnitalkSdk.DestroyRoomResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func roomList(roomType: OmnitalkSdk.VIDEOROOM_TYPE, page: Swift.Int?) async throws -> OmnitalkSdk.RoomListResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func joinRoom(roomId: Swift.String, secret: Swift.String?, userName: Swift.String?) async throws -> OmnitalkSdk.JoinRoomResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func partiList(roomId: Swift.String?, page: Swift.Int?) async throws -> OmnitalkSdk.PartiListResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func publishList(roomId: Swift.String?, page: Swift.Int?) async throws -> OmnitalkSdk.PublishListResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func screenList(roomId: Swift.String?) async throws -> OmnitalkSdk.ScreenListResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func publish(view: WebRTC.RTCMTLVideoView) async throws -> OmnitalkSdk.PublishResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func subscribe(publisherSession: Swift.String, view: WebRTC.RTCMTLVideoView) async throws -> OmnitalkSdk.SubscribeResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func unsubscribe(publisherSession: Swift.String) async throws -> OmnitalkSdk.UnsubscribeResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func offerCall(callType: OmnitalkSdk.CALL_TYPE, callee: Swift.String, record: Swift.Bool?, localView: WebRTC.RTCMTLVideoView?, remoteView: WebRTC.RTCMTLVideoView?) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func answerCall(localView: WebRTC.RTCMTLVideoView?, remoteView: WebRTC.RTCMTLVideoView?) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func answerCall(callType: OmnitalkSdk.CALL_TYPE, caller: Swift.String, localView: WebRTC.RTCMTLVideoView?, remoteView: WebRTC.RTCMTLVideoView?) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func setMute(track: OmnitalkSdk.TRACK_TYPE) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func setUnmute(track: OmnitalkSdk.TRACK_TYPE) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func setVideoDevice(type: OmnitalkSdk.CAM_TYPE) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func setAudioDevice(type: OmnitalkSdk.MIC_TYPE) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendMessage(message: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendWhisper(message: Swift.String, target: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func messageList() async throws -> OmnitalkSdk.MessageListResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func leave(session: Swift.String?) async throws
  #endif
  @objc deinit
}
extension WebRTC.RTCIceConnectionState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension WebRTC.RTCSignalingState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension WebRTC.RTCIceGatheringState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct CreateSessionResult {
  public let session: Swift.String
  public let userId: Swift.String
}
public struct MakeSipNumberResult {
  public let callNumber: Swift.String
  public let roomId: Swift.String?
}
public struct SessionListResult {
  public let page: Swift.Int
  public let count: Swift.Int
  public let list: Swift.Array<OmnitalkSdk.SessionInfo>
}
public struct CreateRoomResult {
  public let session: Swift.String
  public let roomId: Swift.String
}
public struct DestroyRoomResult {
  public let session: Swift.String
  public let roomId: Swift.String
}
public struct RoomListResult {
  public let session: Swift.String
  public let page: Swift.Int
  public let count: Swift.Int
  public let roomType: OmnitalkSdk.VIDEOROOM_TYPE
  public let list: Swift.Array<OmnitalkSdk.Room>
}
public struct JoinRoomResult {
  public let session: Swift.String
  public let roomId: Swift.String
  public let roomType: OmnitalkSdk.VIDEOROOM_TYPE
  public let screen: Swift.Bool
}
public struct PublishResult {
  public let session: Swift.String
}
public struct PartiListResult {
  public let session: Swift.String
  public let page: Swift.Int
  public let count: Swift.Int
  public let roomId: Swift.String
  public let list: Swift.Array<OmnitalkSdk.Participant>
}
public struct PublishListResult {
  public let session: Swift.String
  public let page: Swift.Int
  public let count: Swift.Int
  public let roomId: Swift.String
  public let list: Swift.Array<OmnitalkSdk.Publisher>
}
public struct ScreenListResult {
  public let session: Swift.String
  public let page: Swift.Int
  public let count: Swift.Int
  public let roomId: Swift.String
  public let list: Swift.Array<OmnitalkSdk.ScreenInfo>
}
public struct SubscribeResult {
  public let session: Swift.String
  public let publisherSession: Swift.String
  public let screen: Swift.Bool
}
public struct UnsubscribeResult {
  public let session: Swift.String
  public let publisherSession: Swift.String
}
public struct MessageListResult {
  public let session: Swift.String
  public let page: Swift.Int
  public let count: Swift.Int
  public let list: Swift.Array<OmnitalkSdk.Participant>
}
public struct Room : Swift.Decodable, Swift.Hashable {
  public var subject: Swift.String
  public var secret: Swift.Bool
  public var roomType: OmnitalkSdk.VIDEOROOM_TYPE
  public var roomId: Swift.String
  public var count: Swift.Int
  public var startDate: Swift.Int
  public var endDate: Swift.Int
  public var regDate: Swift.Int
  public var sipSupport: Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OmnitalkSdk.Room, b: OmnitalkSdk.Room) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Participant : Swift.Decodable {
  public var session: Swift.String
  public var userId: Swift.String
  public var userName: Swift.String
  public var callType: OmnitalkSdk.CALL_TYPE
  public init(from decoder: any Swift.Decoder) throws
}
public struct Publisher : Swift.Decodable {
  public var session: Swift.String
  public var userId: Swift.String
  public var userName: Swift.String
  public var callType: OmnitalkSdk.CALL_TYPE
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScreenInfo : Swift.Decodable {
  public var session: Swift.String
  public var userId: Swift.String
  public var userName: Swift.String
  public var callType: OmnitalkSdk.CALL_TYPE
  public init(from decoder: any Swift.Decoder) throws
}
public struct SessionInfo : Swift.Decodable {
  public var state: OmnitalkSdk.SESSION_STATE
  public var userId: Swift.String
  public var callType: OmnitalkSdk.CALL_TYPE
  public init(from decoder: any Swift.Decoder) throws
}
public enum CALL_TYPE : Swift.String, Swift.Codable {
  case AUDIO_CALL
  case VIDEO_CALL
  case SIP_CALL
  case UNKNOWN
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TRACK_TYPE : Swift.String, Swift.Codable {
  case AUDIO
  case VIDEO
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum VIDEOROOM_TYPE : Swift.String, Swift.Codable {
  case AUDIO_CALL
  case VIDEO_CALL
  case AUDIO_ROOM
  case VIDEO_ROOM
  case WEBINAR
  case SIP_CALL
  case ALL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MESSAGE_ACTION : Swift.String, Swift.Codable {
  case SEND
  case WHISPER
  case JOIN
  case LEAVE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SESSION_STATE : Swift.String, Swift.Codable {
  case ACTIVE
  case BUSY
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MIC_TYPE {
  case defaultInEar
  case speaker
  public static func == (a: OmnitalkSdk.MIC_TYPE, b: OmnitalkSdk.MIC_TYPE) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CAM_TYPE {
  case back
  case front
  public static func == (a: OmnitalkSdk.CAM_TYPE, b: OmnitalkSdk.CAM_TYPE) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebRTCVideoView : SwiftUI.UIViewRepresentable {
  public init(view: WebRTC.RTCMTLVideoView)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: OmnitalkSdk.WebRTCVideoView.Context) -> some UIKit.UIView
  
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: @_opaqueReturnTypeOf("$s11OmnitalkSdk15WebRTCVideoViewV10makeUIView7contextQr7SwiftUI0G20RepresentableContextVyACG_tF", 0) __, context: OmnitalkSdk.WebRTCVideoView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = @_opaqueReturnTypeOf("$s11OmnitalkSdk15WebRTCVideoViewV10makeUIView7contextQr7SwiftUI0G20RepresentableContextVyACG_tF", 0) __
}
public enum OmniTalkError : Swift.Error {
  case defaultError(Swift.String)
  case invalidState(Swift.String)
  case invalidParameter(Swift.String)
  case timeoutError(Swift.String)
}
public enum OmniEvent : Swift.String {
  case LEAVE
  case BROADCASTING_EVENT
  case RINGBACK_EVENT
  case RINGING_EVENT
  case CONNECTED_EVENT
  case SCREEN_SHARE_EVENT
  case SCREEN_UNSHARE_EVENT
  case MUTE_EVENT
  case UNMUTE_EVENT
  case MESSAGE_EVENT
  case ACCEPT_EVENT
  case REJECT_EVENT
  case REPORT_EVENT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct EventLeave {
  public let cmd: OmnitalkSdk.OmniEvent
  public let session: Swift.String
}
public struct EventBroadcast {
  public let cmd: OmnitalkSdk.OmniEvent
  public let session: Swift.String
  public let userId: Swift.String
  public let roomType: OmnitalkSdk.VIDEOROOM_TYPE
  public let callType: OmnitalkSdk.CALL_TYPE
}
public struct EventRinging {
  public let cmd: OmnitalkSdk.OmniEvent
  public let session: Swift.String
  public let userId: Swift.String
  public let caller: Swift.String
  public let callee: Swift.String
  public let roomType: OmnitalkSdk.VIDEOROOM_TYPE
  public let callType: OmnitalkSdk.CALL_TYPE
}
public struct EventRingBack {
  public let cmd: OmnitalkSdk.OmniEvent
  public let session: Swift.String
  public let caller: Swift.String
  public let callee: Swift.String
  public let callType: OmnitalkSdk.CALL_TYPE
}
public struct EventConnected {
  public let cmd: OmnitalkSdk.OmniEvent
  public let session: Swift.String
  public let userId: Swift.String
  public let roomType: OmnitalkSdk.VIDEOROOM_TYPE
  public let callType: OmnitalkSdk.CALL_TYPE
}
public struct EventScreenShare {
  public let cmd: OmnitalkSdk.OmniEvent
  public let session: Swift.String
  public let userId: Swift.String
  public let roomType: OmnitalkSdk.VIDEOROOM_TYPE
  public let callType: OmnitalkSdk.CALL_TYPE
}
public struct EventScreenUnshare {
  public let cmd: OmnitalkSdk.OmniEvent
  public let session: Swift.String
  public let userId: Swift.String
  public let roomType: OmnitalkSdk.VIDEOROOM_TYPE
  public let callType: OmnitalkSdk.CALL_TYPE
}
public struct EventMute {
  public let cmd: OmnitalkSdk.OmniEvent
  public let session: Swift.String
  public let track: OmnitalkSdk.TRACK_TYPE
}
public struct EventUnmute {
  public let cmd: OmnitalkSdk.OmniEvent
  public let session: Swift.String
  public let track: OmnitalkSdk.TRACK_TYPE
}
public struct EventMessage {
  public let cmd: OmnitalkSdk.OmniEvent
  public let session: Swift.String
  public let timestamp: Swift.Int
  public let action: OmnitalkSdk.MESSAGE_ACTION
  public let userId: Swift.String
  public let userName: Swift.String
  public let message: Swift.String?
}
extension OmnitalkSdk.CALL_TYPE : Swift.Equatable {}
extension OmnitalkSdk.CALL_TYPE : Swift.Hashable {}
extension OmnitalkSdk.CALL_TYPE : Swift.RawRepresentable {}
extension OmnitalkSdk.TRACK_TYPE : Swift.Equatable {}
extension OmnitalkSdk.TRACK_TYPE : Swift.Hashable {}
extension OmnitalkSdk.TRACK_TYPE : Swift.RawRepresentable {}
extension OmnitalkSdk.VIDEOROOM_TYPE : Swift.Equatable {}
extension OmnitalkSdk.VIDEOROOM_TYPE : Swift.Hashable {}
extension OmnitalkSdk.VIDEOROOM_TYPE : Swift.RawRepresentable {}
extension OmnitalkSdk.MESSAGE_ACTION : Swift.Equatable {}
extension OmnitalkSdk.MESSAGE_ACTION : Swift.Hashable {}
extension OmnitalkSdk.MESSAGE_ACTION : Swift.RawRepresentable {}
extension OmnitalkSdk.SESSION_STATE : Swift.Equatable {}
extension OmnitalkSdk.SESSION_STATE : Swift.Hashable {}
extension OmnitalkSdk.SESSION_STATE : Swift.RawRepresentable {}
extension OmnitalkSdk.MIC_TYPE : Swift.Equatable {}
extension OmnitalkSdk.MIC_TYPE : Swift.Hashable {}
extension OmnitalkSdk.CAM_TYPE : Swift.Equatable {}
extension OmnitalkSdk.CAM_TYPE : Swift.Hashable {}
extension OmnitalkSdk.OmniEvent : Swift.Equatable {}
extension OmnitalkSdk.OmniEvent : Swift.Hashable {}
extension OmnitalkSdk.OmniEvent : Swift.RawRepresentable {}
